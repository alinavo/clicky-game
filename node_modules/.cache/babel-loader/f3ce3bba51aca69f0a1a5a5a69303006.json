{"ast":null,"code":"import _classCallCheck from \"/Users/alinavo/Desktop/codes/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alinavo/Desktop/codes/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alinavo/Desktop/codes/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alinavo/Desktop/codes/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alinavo/Desktop/codes/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/alinavo/Desktop/codes/clicky-game/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/alinavo/Desktop/codes/clicky-game/src/components/ClickyGame.js\";\nimport React, { Component } from \"react\";\nimport Container from \"./Container\";\nimport Navbar from \"./Navbar\";\nimport Header from \"./Header\";\nimport images from '../images';\nimport Footer from './Footer';\n\nvar ClickyGame =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ClickyGame, _Component);\n\n  function ClickyGame() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ClickyGame);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ClickyGame)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      score: 0,\n      highScore: 0,\n      // BLANK CLASS VALUE\n      navMsgColor: \"\",\n      //MESSAGE\n      navMessage: \"Click an image to begin!\",\n      //IMAGE ARRAY URL SHUFFLED\n      allCharacters: _this.shuffleArray(),\n      wasClicked: [],\n      //CSS SHAKES\n      shake: false\n    };\n    _this.clickEvent = _this.checkClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ClickyGame, [{\n    key: \"shuffleArray\",\n    // SHUFFLE IMAGES AROUND\n    value: function shuffleArray() {\n      // COPIES CURRENT CHARACTERS\n      var newArray = images.slice(); // STORES IN SHUFFLED ARRAY\n\n      var shuffleArray = []; // LOOP THROUGH INDEX AND SPLICE\n      // PUSHES TO SHUFFLED ARRAY\n\n      while (newArray.length > 0) {\n        shuffleArray.push(newArray.splice(Math.floor(Math.random() * newArray.length), 1)[0]);\n      }\n\n      return shuffleArray;\n    } // CHECK TO SEE IF IMG WAS CLICKED\n\n  }, {\n    key: \"checkClicked\",\n    value: function checkClicked(clickedElem) {\n      var _this2 = this;\n\n      // COPIES ARRAY\n      //WAS CLICKED STORES CLICKED IMG\n      var prevState = this.state.wasClicked.slice(); // SHUFFLES IMAGES\n\n      var shuffled = this.shuffleArray(); // VAR SCORES\n      // GOTTA USE LET\n      // SETS STATE OF SCORE AND HIGH SCORE\n\n      var score = this.state.score;\n      var highScore = this.state.highScore; // SCORE INCREASE IF ITEM IS CLICKED\n\n      if (!this.state.wasClicked.includes(clickedElem)) {\n        // ADDS TO HIGH SCORE\n        if (score === highScore) {\n          score++;\n          highScore++;\n        } else {\n          score++;\n        } // PUSHES CLICKED IMG TO WASCLICKED\n\n\n        prevState.push(clickedElem);\n      } // RESET SCORE STATE\n\n\n      if (this.state.wasClicked.includes(clickedElem)) {\n        var _score = 0;\n        return this.setState({\n          score: _score,\n          highScore: highScore,\n          navMsgColor: \"incorrect\",\n          navMessage: \"INCORRECT!\",\n          allCharacters: shuffled,\n          wasClicked: [],\n          shake: true\n        });\n      } // KEEP RUNNING WHILE DIFFERENT ELEMENTS HAVE NOT BEEN CLICKED\n\n\n      this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: \"correct\",\n        navMessage: \"CORRECT!\",\n        allCharacters: shuffled,\n        wasClicked: prevState,\n        shake: false\n      });\n      return setTimeout(function () {\n        return _this2.setState({\n          navMsgColor: \"\"\n        });\n      }, 500);\n    } //RENDERS SCORE AND PASSES ALLCHARACTERS TO CONTAINER\n    //PASSES CLICKED TO CONTAINER FOR CLICK EVENT\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var state = this.state;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        score: state.score,\n        highScore: state.highScore,\n        navMessage: state.navMessage,\n        navMsgColor: state.navMsgColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(Container, {\n        shake: state.shake,\n        characters: state.allCharacters,\n        clickEvent: this.clickEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ClickyGame;\n}(Component);\n\nexport default ClickyGame;","map":{"version":3,"sources":["/Users/alinavo/Desktop/codes/clicky-game/src/components/ClickyGame.js"],"names":["React","Component","Container","Navbar","Header","images","Footer","ClickyGame","state","score","highScore","navMsgColor","navMessage","allCharacters","shuffleArray","wasClicked","shake","clickEvent","checkClicked","bind","newArray","slice","length","push","splice","Math","floor","random","clickedElem","prevState","shuffled","includes","setState","setTimeout"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"./Container\";\nimport Navbar from \"./Navbar\";\nimport Header from \"./Header\";\nimport images from '../images';\nimport Footer from './Footer';\n\nclass ClickyGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // BLANK CLASS VALUE\n    navMsgColor: \"\",\n\n    //MESSAGE\n    navMessage: \"Click an image to begin!\",\n\n    //IMAGE ARRAY URL SHUFFLED\n    allCharacters: this.shuffleArray(),\n\n    wasClicked: [],\n\n    //CSS SHAKES\n    shake: false\n  };\n\n  clickEvent = this.checkClicked.bind(this);\n\n  // SHUFFLE IMAGES AROUND\n  shuffleArray() {\n    // COPIES CURRENT CHARACTERS\n\n    const newArray = images.slice();\n\n    // STORES IN SHUFFLED ARRAY\n    const shuffleArray = [];\n\n    // LOOP THROUGH INDEX AND SPLICE\n    // PUSHES TO SHUFFLED ARRAY\n    while (newArray.length > 0) {\n      shuffleArray.push(\n        newArray.splice(Math.floor(Math.random() * newArray.length), 1)[0]\n      );\n    }\n\n    return shuffleArray;\n  }\n\n  // CHECK TO SEE IF IMG WAS CLICKED\n  checkClicked(clickedElem) {\n    // COPIES ARRAY\n    //WAS CLICKED STORES CLICKED IMG\n    const prevState = this.state.wasClicked.slice();\n\n    // SHUFFLES IMAGES\n    const shuffled = this.shuffleArray();\n\n    // VAR SCORES\n    // GOTTA USE LET\n    // SETS STATE OF SCORE AND HIGH SCORE\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // SCORE INCREASE IF ITEM IS CLICKED\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // ADDS TO HIGH SCORE\n      if (score === highScore) {\n        score++;\n        highScore++;\n      } else {\n        score++;\n      }\n\n      // PUSHES CLICKED IMG TO WASCLICKED\n      prevState.push(clickedElem);\n    }\n\n    // RESET SCORE STATE\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: \"incorrect\",\n        navMessage: \"INCORRECT!\",\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n    // KEEP RUNNING WHILE DIFFERENT ELEMENTS HAVE NOT BEEN CLICKED\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: \"correct\",\n      navMessage: \"CORRECT!\",\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n    return setTimeout(() => this.setState({ navMsgColor: \"\" }), 500);\n  }\n  //RENDERS SCORE AND PASSES ALLCHARACTERS TO CONTAINER\n  //PASSES CLICKED TO CONTAINER FOR CLICK EVENT\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Header />\n        <Container\n          shake={state.shake}\n          characters={state.allCharacters}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default ClickyGame;\n"]},"metadata":{},"sourceType":"module"}